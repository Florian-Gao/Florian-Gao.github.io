{"meta":{"title":"境随心转","subtitle":"事来则应，事去不留","description":null,"author":"Florian-Gao","url":"http://yoursite.com","root":"/"},"pages":[{"title":"自己读书整理","date":"2019-08-31T11:46:52.000Z","updated":"2019-09-01T05:13:50.690Z","comments":false,"path":"gitbook/index.html","permalink":"http://yoursite.com/gitbook/index.html","excerpt":"","text":"git使用指南"},{"title":"","date":"2019-08-31T09:13:19.000Z","updated":"2019-09-01T08:52:40.284Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"简介各位大佬，大家好，我是编程时长两年半的个人程序猿Florian-Gao, 喜欢旅游、摄影、健身、编程。🙄music 联系方式QQ 1035072156"},{"title":"categories","date":"2019-08-31T09:13:09.000Z","updated":"2019-08-31T10:19:24.839Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-08-31T09:11:33.000Z","updated":"2019-08-31T11:50:07.081Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"wanmen_py5_pdplot","slug":"wanmen_python/wanmen_py5_pdplot","date":"2019-09-10T14:51:49.000Z","updated":"2019-09-12T02:46:41.606Z","comments":true,"path":"2019/09/10/wanmen_python/wanmen_py5_pdplot/","link":"","permalink":"http://yoursite.com/2019/09/10/wanmen_python/wanmen_py5_pdplot/","excerpt":"","text":"12import pandas as pddf=pd.read_csv('/Users/Florian_Gao/Desktop/git/github/wanmen-python/modol.csv') 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 1 2 李 男 110 129 131 2 3 赵 女 111 123 124 3 4 孙 女 124 145 143 4 5 兰 男 122 133 144 12df['new_score']=df.apply(lambda x:x.数学+x.语文,axis=1)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 new_score 0 1 高 男 120 110 130 230 1 2 李 男 110 129 131 239 2 3 赵 女 111 123 124 234 3 4 孙 女 124 145 143 269 4 5 兰 男 122 133 144 255 1df=df.drop(['new_score'],axis=1) 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 1 2 李 男 110 129 131 2 3 赵 女 111 123 124 3 4 孙 女 124 145 143 4 5 兰 男 122 133 144 绘图12345import numpy as npimport pandas as pdimport matplotlib.pyplot as plt%matplotlib inline # 说明要画在notebook中 123x=np.linspace(0,10,100)y=np.sin(x)plt.plot(x,y) [&lt;matplotlib.lines.Line2D at 0x1a22542cc0&gt;] 12fig=plt.figure()plt.plot(x,y,'--') [&lt;matplotlib.lines.Line2D at 0x1a226a2cc0&gt;] 12#保存图片，与点击保存效果相同fig.savefig('/Users/Florian_Gao/Desktop/git/github/wanmen-python/first_plot.png') 分块1234567plt.subplot(2,1,1)plt.plot(x,y,'--',label='sinx')plt.legend()plt.subplot(2,1,2)plt.plot(x,np.cos(x),'--',color='r',label='cosx')# legend控制label的显示效果plt.legend() &lt;matplotlib.legend.Legend at 0x1a22790860&gt; 1plt.plot? 12# xlim ylimplt.xlim(0,1) (0, 1) 1plt.scatter(x,y) #点状图 &lt;matplotlib.collections.PathCollection at 0x1a22a54860&gt; 12345678910import random# 改变样式plt.style.use('classic')x=np.random.randn(100) #均值0，方差1y=np.random.randn(100) colors=np.random.rand(100)sizes=1000*np.random.rand(100)plt.scatter(x,y,c=colors,s=sizes,alpha=0.4)plt.colorbar() &lt;matplotlib.colorbar.Colorbar at 0x1a22b649b0&gt; pandas 本身自带绘画1234df=pd.DataFrame(np.random.rand(100,4).cumsum(0),columns=['A','B','C','D'])#comsum 是加和操作 0 按行/1 按列df.plot()df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 0.289320 0.372710 0.051150 0.019810 1 0.870367 1.203777 0.615242 0.735907 2 1.275859 1.596964 0.738416 1.724947 3 1.688890 1.935973 0.902156 1.758310 4 2.499074 2.698976 1.019705 2.375565 123df=pd.DataFrame(np.random.rand(100,4),columns=['A','B','C','D'])df.plot()df.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 0.061443 0.842002 0.241945 0.455003 1 0.501737 0.168112 0.050991 0.418404 2 0.940408 0.085285 0.573517 0.259610 3 0.423264 0.796483 0.684808 0.929808 4 0.317713 0.310176 0.148773 0.330037 12dp=pd.DataFrame(np.random.randint(30,50,(3,4)),columns=['A','B','C','D'],index=['one','two','three'])dp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D one 31 34 39 36 two 46 30 30 42 three 39 41 39 46 1dp.plot.bar() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a22a06588&gt; 1dp.B.plot.bar() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a22dd5710&gt; 12# 用kind 来进行画图dp.plot(kind='bar') &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a22f2cac8&gt; 12# 进行累加dp.plot(kind='bar',stacked=True) &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a2308c940&gt; 123# 直方图 figersize 图像大小 ，可以查看说明，进行具体项目的修改dp.hist(figsize=(9,6)) array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a23209208&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a2322f828&gt;], [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a23344da0&gt;, &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1a23377358&gt;]], dtype=object) 12# 密度图dp.plot.kde() &lt;matplotlib.axes._subplots.AxesSubplot at 0x1a234aa4a8&gt;","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"wanmen","slug":"wanmen","permalink":"http://yoursite.com/tags/wanmen/"}]},{"title":"wanmen_py5_pd","slug":"wanmen_python/wanmen_py5_pd","date":"2019-09-09T14:51:49.000Z","updated":"2019-09-12T02:29:04.116Z","comments":true,"path":"2019/09/09/wanmen_python/wanmen_py5_pd/","link":"","permalink":"http://yoursite.com/2019/09/09/wanmen_python/wanmen_py5_pd/","excerpt":"","text":"pandas 新的数据格式 .csv 纯文本 每条记录被分隔符分隔为字段 每条记录都有同样的字段序列 1import pandas as pd 12#df=pd.read_csv('路径')df=pd.read_csv('/Users/Florian_Gao/Desktop/git/github/wanmen-python/modol.csv', sep=',') # sep 分隔符格式 1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 1 2 李 男 110 129 131 2 3 赵 女 111 123 124 3 4 孙 女 124 145 143 4 5 兰 男 122 133 144 12#打印几行df.head(2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 1 2 李 男 110 129 131 1type(df) pandas.core.frame.DataFrame1234#列名print(df.columns)#索引print(df.index) Index([&apos;序号&apos;, &apos;姓名&apos;, &apos;性别&apos;, &apos;语文&apos;, &apos;数学&apos;, &apos;英语&apos;], dtype=&apos;object&apos;) RangeIndex(start=0, stop=5, step=1)12# 第0行df.loc[0] 序号 1 姓名 高 性别 男 语文 120 数学 110 英语 130 Name: 0, dtype: object筛选12# the first column is 序号df.columns[0] &apos;序号&apos;1df.数学&gt;3 0 True 1 True 2 True 3 True 4 True Name: 数学, dtype: bool1df[df.数学&gt;3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 1 2 李 男 110 129 131 2 3 赵 女 111 123 124 3 4 孙 女 124 145 143 4 5 兰 男 122 133 144 复杂筛选12# 语文&lt;4，数学&gt;2df[(df.语文&lt;4)&amp;(df.数学&gt;2)] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 排序12#先按数学排序，再按语文排序df.sort_values(['数学','语文']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 0 1 高 男 120 110 130 2 3 赵 女 111 123 124 1 2 李 男 110 129 131 4 5 兰 男 122 133 144 3 4 孙 女 124 145 143 访问12#按索引位 第四行 /0 1 2 3df.loc[3] 序号 4 姓名 孙 性别 女 语文 124 数学 145 英语 143 Name: 3, dtype: object索引1234567scores=&#123; 'Name':['gao','li','wang'], 'English':[120,110,130], 'Math':[122,132,143]&#125;dp=pd.DataFrame(scores,index=['one','two','three']) # 这里自己制定的索引形式dp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math one gao 120 122 two li 110 132 three wang 130 143 1dp.index Index([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], dtype=&apos;object&apos;)12#dp.loc[1] #此时索引位0ne，two，threedp.loc['one'] Name gao English 120 Math 122 Name: one, dtype: object1dp.iloc[0] #这个就可以实现不按index进行操作 Name gao English 120 Math 122 Name: one, dtype: object12#合并loc和ilocdp.ix[0] /Users/Florian_Gao/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: DeprecationWarning: .ix is deprecated. Please use .loc for label based indexing or .iloc for positional indexing See the documentation here: http://pandas.pydata.org/pandas-docs/stable/indexing.html#ix-indexer-is-deprecated Name gao English 120 Math 122 Name: one, dtype: object12# 也可进行切片，打印前两行dp.iloc[:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math one gao 120 122 two li 110 132 1234#访问某一行，是错误的#dp[0]#访问前两行就可以,可以使用切片dp[:2] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math math classify one gao 120 122 good two li 110 132 very good 1dp.Math.values array([122, 132, 143])12#简单技术dp.Math.value_counts() 143 1 122 1 132 1 Name: Math, dtype: int64重点1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 new_line math classify 0 1 高 男 120 110 130 keep going keep going 1 2 李 男 110 129 131 good good 2 3 赵 女 111 123 124 good good 3 4 孙 女 124 145 143 very good very good 4 5 兰 男 122 133 144 very good very good 12345678910def func(score): if score&gt;=130: return 'very good' elif score&gt;=120: return 'good' else: return 'keep going'#dp['math classify']=dp.Math.map(func)df['math classify']=df.数学.map(func)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 序号 姓名 性别 语文 数学 英语 new_line math classify 0 1 高 男 120 110 130 keep going keep going 1 2 李 男 110 129 131 good good 2 3 赵 女 111 123 124 good good 3 4 孙 女 124 145 143 very good very good 4 5 兰 男 122 133 144 very good very good 同样的，用apply也可以实现增加一行123#多列形成一个新列dp['new_score']=dp.apply(lambda x: x.Math+ x.English,axis=1)dp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math math classify new_score one gao 120 122 good 242 two li 110 132 very good 242 three wang 130 143 very good 273 1234#前两行dp.head(2)#后两行dp.tail(2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math math classify new_score two li 110 132 very good 242 three wang 130 143 very good 273 全局使用，以及lambda函数使用12# x 表示所有元素dp.applymap(lambda x: '%'+str(x)+ '%') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Name English Math math classify new_score one %gao% %120% %122% %good% %242% two %li% %110% %132% %very good% %242% three %wang% %130% %143% %very good% %273% 匿名函数12def func(x): return x+100 1list(map(func,range(10))) [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"wanmen","slug":"wanmen","permalink":"http://yoursite.com/tags/wanmen/"}]},{"title":"wanmen_py4_np","slug":"wanmen_python/wanmen_py4_np","date":"2019-09-08T14:51:49.000Z","updated":"2019-09-12T02:28:19.241Z","comments":true,"path":"2019/09/08/wanmen_python/wanmen_py4_np/","link":"","permalink":"http://yoursite.com/2019/09/08/wanmen_python/wanmen_py4_np/","excerpt":"","text":"py41import numpy as np 列表转换为数组1234a=list(range(10))b=np.array(a)print(b)type(b) [0 1 2 3 4 5 6 7 8 9] numpy.ndarray1np.zeros((4,4),dtype=int) array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])12b=np.ones((3,4),float)b array([[1., 1., 1., 1.], [1., 1., 1., 1.], [1., 1., 1., 1.]])1np.full((3,3),3.14) array([[3.14, 3.14, 3.14], [3.14, 3.14, 3.14], [3.14, 3.14, 3.14]])1np.full_like(b,314) array([[314., 314., 314., 314.], [314., 314., 314., 314.], [314., 314., 314., 314.]])1np.zeros_like(b,int) array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]])random12import randomrandom.randint(5,10) #randint 5-10随机数 512#3*3数组 random 0-1随机数np.random.random((3,3)) array([[0.50325932, 0.2297995 , 0.1392857 ], [0.54897845, 0.16455239, 0.29737913], [0.13850923, 0.29868182, 0.51995168]])12#5*5数组（形成随机数，经常用到）np.random.randint(0,10,(5,5)) array([[2, 6, 8, 2, 7], [7, 8, 3, 4, 5], [8, 9, 2, 6, 0], [1, 6, 5, 0, 6], [6, 1, 1, 2, 8]])范围取值1list(range(0,10)) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]12# np.arrange(begin,end, step)np.arange(0,10,2) array([0, 2, 4, 6, 8])12# np.linspace(初始值，末尾值，个数)np.linspace(0,3,10) array([0. , 0.33333333, 0.66666667, 1. , 1.33333333, 1.66666667, 2. , 2.33333333, 2.66666667, 3. ])12# 单位矩阵np.eye(10,dtype=int) array([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1]])访问数组中元素123# 嵌套列表的元素访问a=[[1,2,3],[2,3,4],[3,4,5]]a[1][0] 212b=np.full((3,3),3,int)b[0][1] 312#另一种方法提取元素b[0,1] 312#数组切片 取前两行b[:2] array([[3, 3, 3], [3, 3, 3]])12# 取前两行和前两列b[:2,:2] array([[3, 3], [3, 3]])12# 取前两行，再取前两行,与b[:2,:2]不一样b[:2][:2] array([[3, 3, 3], [3, 3, 3]])数组属性123456789101112# 维度print(b.ndim)# shape n*n矩阵print(b.shape)# size 有多少个数print(b.size)# dtype 数据类型print(b.dtype)# itemsize 每个树占8个字节print(b.itemsize)# nbytes 一共占多少字节，8*9print(b.nbytes) 2 (3, 3) 9 int64 8 72np运算1np.full(10,2.3) array([2.3, 2.3, 2.3, 2.3, 2.3, 2.3, 2.3, 2.3, 2.3, 2.3])123a=np.array([[1,2],[2,4]])print(np.sum(a))print(np.sum(a,axis=1)) # 按行求和 9 [3 6]1np.random.rand(10) #rand and random is same array([0.32042186, 0.0939424 , 0.4289252 , 0.35593387, 0.92730687, 0.28779505, 0.90388186, 0.19089802, 0.29240305, 0.11551011])12#和上面一样n=np.random.random(10) 12# timeit 看时间%timeit sum(n) 1.96 µs ± 23.4 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)1%timeit np.sum(n) 3.51 µs ± 87.2 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)bool 比较1a=np.array(range(10)) 1a array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])1a&gt;3 array([False, False, False, False, True, True, True, True, True, True])1a.reshape(2,5) array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])1np.sort(a) array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])拼接12345#0 按行拼接，1按列拼接a=[[1,2,3],[1,2,3]]b=[[2,3,4],[2,3,4]]c=[[3,4,5],[3,4,5]]np.concatenate([a,b,c],axis=0) #0 按行拼接，1按列拼接 array([[1, 2, 3], [1, 2, 3], [2, 3, 4], [2, 3, 4], [3, 4, 5], [3, 4, 5]])","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"wanmen","slug":"wanmen","permalink":"http://yoursite.com/tags/wanmen/"}]},{"title":"wanmen_py2_基础","slug":"wanmen_python/wanmen_py2_基础","date":"2019-09-06T14:51:49.000Z","updated":"2019-09-12T02:27:09.443Z","comments":true,"path":"2019/09/06/wanmen_python/wanmen_py2_基础/","link":"","permalink":"http://yoursite.com/2019/09/06/wanmen_python/wanmen_py2_基础/","excerpt":"","text":"python 下条件判断 if123456if condition: doelif condition: do else: do --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-1-ab58e33a4037&gt; in &lt;module&gt; ----&gt; 1 if condition: 2 do 3 elif condition: 4 do 5 else: NameError: name &apos;condition&apos; is not defined断言 assert12age=18assert age==18 12age=18assert age==19 '他竟然不是18' File &quot;&lt;ipython-input-7-afa90edc5ffb&gt;&quot;, line 2 assert age==19 &apos;他竟然不是18&apos; ^ SyntaxError: invalid syntax循环 (能使用for，尽量使用for循环)for123costs=[1,2,3,4,5]for cost in costs: print('消费&#123;&#125;元'.format(str(cost).center(10))) 消费 1 元 消费 2 元 消费 3 元 消费 4 元 消费 5 元for循环可以加else123456789a=[2,3,4]for i in a: if i%2==0: print('&#123;&#125; is even'.format(i)) else: print('&#123;&#125; is odd'.format(i))else: print('all') 2 is even 3 is odd 4 is even allfor 循环构建推导式12a=list(range(10))a [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]12b=[c*10 for c in a]b [0, 10, 20, 30, 40, 50, 60, 70, 80, 90]1234# 字典推导式b=[111,222,333]dict_num=&#123;c:d for c in a for d in b&#125;dict_num {2: 333, 3: 333, 4: 333}while123456import random as rrandom_numbers=[]while len(random_numbers)&lt;10: random_numbers.append(r.randint(0,10))print(random_numbers,len(random_numbers)) [3, 6, 10, 9, 5, 4, 8, 2, 9, 7] 10continue 跳出本次小循环break 跳出整个大循环12 12 函数 def1234567var=&#123; 'a':100, 'b':100, 'c':200&#125;#注意要有括号框起来，否则运行不起来[key for key, value in var.items() if value==100] [&apos;a&apos;, &apos;b&apos;]1234#函数调用def get_keys(va,value): return [k for k,v in va.items() if v==value]get_keys(var,200) [&apos;c&apos;]1get_keys(&#123;'a':10&#125;,10) [&apos;a&apos;]不建议在函数内对可变类型进行更改，建议用函数返回值进行更改，列表可变，变量，元组不可变参数的收集123def test(name,age,*args,**keys):# *args 收集位置参数， **keys收集关键字参数 print(name,age,*args,**keys)test('Tom',18,28,[1,28]) #如果没有*args，后面的那些数字会形成一个元组 如果没有**keys，就会在后面又出现一个空字典&#123;&#125; Tom 18 28 [1, 28]1test('Bob',17,var) Bob 17 {&apos;a&apos;: 100, &apos;b&apos;: 100, &apos;c&apos;: 200}12import randomround(random.random(),3) 0.834python 装饰器1234567@decorator# 等同于f=decorator(test)def test(): return random.random()@decoratordef test_2(): return random.random()*10 1234def decorator(func): def wrapper(*args,**k): return round(func(*args,**k),3) return wrapper 1test() 0.3241test_2() 7.428类12345678910111213141516class Person: def __init__(self, name, age): self._name=name self._age=age #初始化函数中，self后面的是实例化对象的属性，加下划线的意思是，代表这个属性是私有的，不应该访问 def get_name(self): return self._name def get_age(self): return self._age def rename(self,new_name): self._name=new_name 初始化函数中，self后面的是实例化对象的属性，加下划线的意思是，代表这个属性是私有的，不应该访问1p=Person('gao',12) 1p.get_name() &apos;gao&apos;1p.get_age() 121p.rename('wang') 1p.get_name() &apos;wang&apos;类里面套用类1234567class Student(Person): def set_score(self,score): self._score=score def get_score(self): return self._score 1s=Student('gao',12) 1s.get_name() &apos;gao&apos;1s.get_age() 121s.set_score(100) 1s.get_score() 100","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"wanmem","slug":"wanmem","permalink":"http://yoursite.com/tags/wanmem/"}]},{"title":"wanmen_py1_基础","slug":"wanmen_python/wanmen-py1-基础","date":"2019-09-05T14:51:49.000Z","updated":"2019-09-12T02:25:52.644Z","comments":true,"path":"2019/09/05/wanmen_python/wanmen-py1-基础/","link":"","permalink":"http://yoursite.com/2019/09/05/wanmen_python/wanmen-py1-基础/","excerpt":"","text":"floor 向下取整ceil 向上取整增强的格式化字符串函数 format增强的格式化字符串函数 format1import math 1apple_cost = 10 1'苹果的花费为：&#123;&#125;'.format(apple_cost) &apos;苹果的花费为：10&apos;变量类型 字符串 str 数字 int float complex 列表 list 元组 tuple 字典 dic 12#乘方，开方math.pow(3,10) 59049.013**10 5904912#向下取整math.floor(2.33) 212# 向上取整math.ceil(2.33) 312# 度的转换math.radians(180) 3.14159265358979312# sinmath.sin(math.pi/2) 1.012# max minmax(1,2,3) 312#sumsum([10,19,20]) 4912#divmod()divmod(10,4) (2, 2)bool 型表格样式（md格式）对齐用 ： 操作符 解释 &lt; 小于 切片字符串不允许变换1list= 'adsfgh jkl' 12#间隔取字符list[0:20:2] &apos;asg k&apos;12#取后5个字符list[-5:] &apos;h jkl&apos;12#翻转字符list[::-1] &apos;lkj hgfsda&apos;12# 不支持变换list[-1]=q --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-11-560b81b97c50&gt; in &lt;module&gt; 1 # 不支持变换 ----&gt; 2 list[-1]=q NameError: name &apos;q&apos; is not defined查看函数用法1list.capitalize? 12#不加%，就是空格输出list.center(20,'%') &apos;%%%%%adsfgh jkl%%%%%&apos;1list.count('a') 1首位字符串以其结尾或开头1list.startswith('abs') False1list.endswith('abs') False1list &apos;adsfgh jkl&apos;12#查找list.find('a') 01list.index('a') 01234# 去除空格 strip# 左侧空格 lstripline=' abd'line.strip() &apos;abd&apos;1list.upper() &apos;ADSFGH JKL&apos;1list.lower() &apos;adsfgh jkl&apos;1list.istitle() False1list.isupper() False1list=' absddfff ' 1list.strip() &apos;absddfff&apos;12#只去掉左边list.lstrip() &apos;absddfff &apos;列表12# 空列表a=[1,2] 可以容纳任意类型的对象，任意数量的对象列表是可变的，字符串是不可变的python 是一种动态类型语言，一个变量是什么类型，要看程序在运行过程中变量所代表的🈯️是什么12var=[10,2,3,4]type(var) list1var+[10] [10, 2, 3, 4, 10]字符串和列表是一种容器型序列，字符串是扁平型序列123a=[1,2]b=[3,4]a+b [1, 2, 3, 4]12a.extend(b)a [1, 2, 3, 4]14 in a Truetuple 元组 （不可变）1var=() 1var=tuple() 1type(var) tuple1var=(1,2,3,[1,2]) 123#如果一个元素元组a=(1)type(a) int123# 发现上面的不可以，怎么办,下面的方法a=(1,)type(a) tupledic 字典1var=&#123;&#125; 1var=dict() 1type(var) dict1234var=&#123; '中':100, '左':200&#125; 1var {&apos;中&apos;: 100, &apos;左&apos;: 200}拉锁函数(zip)12a= [1,2,3]b= [2,3,4] 12c= dict(zip(a,b))c {1: 2, 2: 3, 3: 4}1c.fromkeys? 1c.keys() dict_keys([1, 2, 3])1c.values() dict_values([2, 3, 4])1c.popitem? 1c.items() dict_items([(1, 2), (2, 3), (3, 4)])","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"wanmen","slug":"wanmen","permalink":"http://yoursite.com/tags/wanmen/"}]},{"title":"jupyter-notebook","slug":"jupyter-notebook/20190905-jupyter-notebook","date":"2019-09-05T13:27:07.000Z","updated":"2019-09-06T01:03:57.464Z","comments":true,"path":"2019/09/05/jupyter-notebook/20190905-jupyter-notebook/","link":"","permalink":"http://yoursite.com/2019/09/05/jupyter-notebook/20190905-jupyter-notebook/","excerpt":"","text":"install对于Anacanda安装，如果没有，命令行 1conda install jupyter notebook operate jupyter notebookhelp123jupyter notebook --helporjupyter notebook --h launch1jupyter notebook designated port start1234jupyter notebook --port&lt;port_number&gt;such asjupyter notebook --port 9999#start at port 9999 快捷方式y/m 代码/markdown转换a/d 在上方建立代码块/下方建立代码块c/x/v 复制/剪切/粘贴d deleteh 出现快捷键l 代码标行数$公式输入，行内$$ 公式输入，单独行","categories":[],"tags":[{"name":"jumpter-notebook","slug":"jumpter-notebook","permalink":"http://yoursite.com/tags/jumpter-notebook/"}]},{"title":"python基础2","slug":"python基础2/20190905-python基础2","date":"2019-09-05T11:39:38.000Z","updated":"2019-09-05T11:39:38.818Z","comments":true,"path":"2019/09/05/python基础2/20190905-python基础2/","link":"","permalink":"http://yoursite.com/2019/09/05/python基础2/20190905-python基础2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"python基础2","slug":"wanmen_python/20190905-python基础2","date":"2019-09-05T11:39:38.000Z","updated":"2019-09-06T15:56:21.986Z","comments":true,"path":"2019/09/05/wanmen_python/20190905-python基础2/","link":"","permalink":"http://yoursite.com/2019/09/05/wanmen_python/20190905-python基础2/","excerpt":"","text":"","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Multiprocessing/多进程","slug":"Multiprocessing/20190904-Multiprocessing","date":"2019-09-04T13:21:20.000Z","updated":"2019-09-05T13:27:21.793Z","comments":true,"path":"2019/09/04/Multiprocessing/20190904-Multiprocessing/","link":"","permalink":"http://yoursite.com/2019/09/04/Multiprocessing/20190904-Multiprocessing/","excerpt":"","text":"import12import multiprocessing as mpimport threading as td 定义一个被线程和进程调用的函数12def job(a,d) print(&apos;aaaa&apos;) 创建线程和进程注意：Thread和Process的首字母都要大写，被调用的函数没有括号，被调用的函数的参数放在args(…)中 12t1=td.Thread(target=job,args=(1,2))p1 = mp.Process(target=job,args=(1,2)) 启动线程和进程12t1.start()p1.start() 分别连接线程和进程12t1.join()d1.join() full code123456789101112import multiprocessing as mpimport threading as tddef job(a,d): print(&apos;aaaaa&apos;)t1 = td.Thread(target=job,args=(1,2))p1 = mp.Process(target=job,args=(1,2))t1.start()p1.start()t1.join() # 分别连接线程和进程p1.join() use1if __name__=&apos;__main__&apos; 123456789import multiprocessing as mpdef job(a,d): print(&apos;aaaaa&apos;)if __name__==&apos;__main__&apos;: p1 = mp.Process(target=job,args=(1,2)) p1.start() p1.join() Queen #use to store process12345678910111213141516171819import multiprocessing as mpdef job(q): res=0 for i in range(1000): res+=i+i**2+i**3 q.put(res) #queue put data in queenif __name__==&apos;__main__&apos;: q = mp.Queue() p1 = mp.Process(target=job,args=(q,)) p2 = mp.Process(target=job,args=(q,)) p1.start() p2.start() p1.join() p2.join() res1 = q.get() #get the data res2 = q.get() print(res1+res2) multiprocessing and threading compare12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152import multiprocessing as mpimport threading as tdimport timedef job(q): res = 0 for i in range(1000000): res += i+i**2+i**3 q.put(res) # queuedef multicore(): q = mp.Queue() p1 = mp.Process(target=job, args=(q,)) p2 = mp.Process(target=job, args=(q,)) p1.start() p2.start() p1.join() p2.join() res1 = q.get() res2 = q.get() print(&apos;multicore:&apos; , res1+res2)def normal(): res = 0 for _ in range(2): for i in range(1000000): res += i+i**2+i**3 print(&apos;normal:&apos;, res)def multithread(): q = mp.Queue() t1 = td.Thread(target=job, args=(q,)) t2 = td.Thread(target=job, args=(q,)) t1.start() t2.start() t1.join() t2.join() res1 = q.get() res2 = q.get() print(&apos;multithread:&apos;, res1+res2)if __name__ == &apos;__main__&apos;: st = time.time() normal() st1= time.time() print(&apos;normal time:&apos;, st1 - st) multithread() st2 = time.time() print(&apos;multithread time:&apos;, st2 - st1) multicore() print(&apos;multicore time:&apos;, time.time()-st2)finally, we find multicore is the fastest, multithread is the slowest Pool #the processing pool`pool will get a return value, but process can’t get the return value.’pool call the core of CPU, the parameter of processing can design the core’s number of CPU 1234567891011121314151617import multiprocessing as mpdef job(x): return x*xdef multicore(): pool = mp.Pool(processes=2) # define the pool, the num in braket(括号) is the core&apos;s num res = pool.map(job, range(10)) # return results print(res) #[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] res = pool.apply_async(job, (2,)) #this way can only get one result, and it will be put in only one core to calculate, attention ,there is a comma（逗号） print(res.get()) multi_res =[pool.apply_async(job, (i,)) for i in range(10)] #put into iterator print([res.get() for res in multi_res]) # get from the iteratorif __name__ == &apos;__main__&apos;: multicore() share memory (共享内存)shared value12345import multiprocessing as mpvalue1 = mp.Value(&apos;i&apos;, 0) value2 = mp.Value(&apos;d&apos;, 3.14)# i、d 是设置数据类型的，i代表带符号的整型，d代表双精度浮点类型 shared array1234567array = mp.Array(&apos;i&apos;, [1, 2, 3, 4]) # is rightarray = mp.Array(&apos;i&apos;, [[1, 2], [3, 4]]) # 2维list&quot;&quot;&quot;TypeError: an integer is required&quot;&quot;&quot;## Array is different from numpy, it only be one dimensional, can&apos;t be multi-dimensional parametric data form processing lockno lock1234567891011121314151617181920import multiprocessing as mpimport timedef job(v, num): for _ in range(5): time.sleep(0.1) # 暂停0.1秒，让输出效果更明显 v.value += num # v.value获取共享变量值 print(v.value, end=&quot;&quot;) def multicore(): v = mp.Value(&apos;i&apos;, 0) # 定义共享变量 p1 = mp.Process(target=job, args=(v,1)) p2 = mp.Process(target=job, args=(v,3)) # 设定不同的number看如何抢夺内存 p1.start() p2.start() p1.join() p2.join() if __name__ == &apos;__main__&apos;: multicore() the result/ process 1 and process 2 battle for the shared memory 12345678910145891213161720 if we add process lock ## l=mp.lock()1234567891011121314151617181920def job(v, num, l): l.acquire() # 锁住 for _ in range(5): time.sleep(0.1) v.value += num # 获取共享内存 print(v.value) l.release() # 释放def multicore(): l = mp.Lock() # 定义一个进程锁 v = mp.Value(&apos;i&apos;, 0) # 定义共享内存 p1 = mp.Process(target=job, args=(v,1,l)) # 需要将lock传入 p2 = mp.Process(target=job, args=(v,3,l)) p1.start() p2.start() p1.join() p2.join()if __name__ == &apos;__main__&apos;: multicore() the result #when p 1 is done, p 2 begins 1234567891012345811141720","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"python基础","slug":"python基础/20190901-python基础","date":"2019-09-03T13:13:09.000Z","updated":"2019-09-04T11:17:37.172Z","comments":true,"path":"2019/09/03/python基础/20190901-python基础/","link":"","permalink":"http://yoursite.com/2019/09/03/python基础/20190901-python基础/","excerpt":"","text":"pythonprint用法123print(&apos;&apos;)字符串要单引号或双引print(&apos;hello&apos;+&apos;python&apos;)这样字符串可以进行连接python(3+1)运算不需要引号 基本运算12^在matlab中是平方，在python是**表示平方%取余 变量12a,b,c=1,2,3print(a) while1234a=10while a; print(a) a=a-1 for循环123list=[1,2,3,4]for i in list; print(i) 1234range使用range(start,stop)左开右闭range(stop)=range(0,stop)range(start,stop,step) 高级主题内置集合12345tuple 元组 元组内元素不可改变tup=(&apos;python&apos;,2.4,64)for i in tup; print(i)出来的是tup内的三个元素 1234567dicdic=&#123;&#125;dic[&apos;a&apos;]=&apos;python&apos;dic[&apos;b&apos;]=2.5for k in dic; print(k,dic[k])这个里面k相当于字典的目录，检索功能 12345set 可以去重s=set([&apos;a&apos;,&apos;s&apos;,&apos;d&apos;,&apos;a&apos;])for i in s; print(i)输出只有a,s,d,就会少一个a 生成器12345678910111213yield 每次执行，立刻返回结果给上层调用者，而当前状态保留 def fib(max); a,b=0,1; while max; r=b a,b=b,a+b max-=1 yield r for i in fib(5); print(i)输出为1，1，2，3，5 if12if x==y; print(x) 这是对的，如果x=y 就是赋值 12345678if condition: print()elif condition2: print()elif condition3: print()else: print() def 自建函数123456def fun(): print(&apos;hahaha&apos;) a=1+2 print(a)fun() 123456def sale_car(price, color=&apos;red&apos;, brand=&apos;carmy&apos;, is_second_hand=True): print(&apos;price&apos;, price, &apos;color&apos;, color, &apos;brand&apos;, brand, &apos;is_second_hand&apos;, is_second_hand,)注意这的逗号调用sale_car(1000),sale_car(1000, &apos;red&apos;, &apos;carmy&apos;, True) 都可以，出现的一样的结果 可变参数，*参数，相当于列表1234567def report(name, *grades) #这里grades是可变参数，可以是可迭代对象 total_report=0 for grade in grades: total_grade+=grade print(name,&apos;total grade is &apos;,total_grade)#调用report(&apos;mike&apos;,8,9,7) 关键字参数，**参数，相当于字典123456def portrait(name, **kw): print(&apos;name is&apos;, name) for k,v in kw.items(): print(k, v)#调用portrait(&apos;Mike&apos;, age=24, country=&apos;China&apos;, education=&apos;bachelor&apos;) 1通过可变参数和关键字参数，任何函数都可以用 universal_func(*args, **kw) 表达 全局/局部变量123456789101112全局变量APPLY = 100 # 全局变量a = Nonedef fun(): global a # 使用之前在全局里定义的 a a = 20 # 现在的 a 是全局变量了 return a+100print(APPLE) # 100print(&apos;a past:&apos;, a) # Nonefun()print(&apos;a now:&apos;, a) # 20 1234567局部变量def fun(): a = 10 print(a) return a+100print(fun()) 读写文件123\\n #换行\\t #对齐，tap对齐file=open(&apos;my file.txt&apos;,&apos;w&apos;) #w写文件，如果没有，会新建一个,r读文件，a append新增内容，需要提前有文件 1234append_text=&apos;\\nThis is appended file.&apos; # 为这行文字提前空行 &quot;\\n&quot;my_file=open(&apos;my file.txt&apos;,&apos;a&apos;) # &apos;a&apos;=append 以增加内容的形式打开,然而w是覆盖写入my_file.write(append_text) # 往原文件里添加了一句my_file.close() 读取文件123file=open(&apos;file.txt&apos;,&apos;r&apos;)content=file.read()print(content) 123456789按行读取file= open(&apos;my file.txt&apos;,&apos;r&apos;) content=file.readlines() # python_list 形式print(content)orfor item in content: print(item) class12345678910111213141516171819class Calculator: #首字母要大写，冒号不能缺 name=&apos;Good Calculator&apos; #该行为class的属性 price=18 def add(self,x,y): print(self.name) result = x + y print(result) def minus(self,x,y): result=x-y print(result) def times(self,x,y): print(x*y) def divide(self,x,y): print(x/y)定义类之后，其他的用的调用cal=Calculator() #注意这里运行class的时候要加&quot;()&quot;,否则调用下面函数的时候会出现错误,导致无法调用.cal.namecal.times init 初始化12345678910class Calculator: name=&apos;good calculator&apos; price=18 def __init__(self,name,price,height,width,weight): # 注意，这里的下划线是双下划线 self.name=name self.price=price self.h=height self.wi=width self.we=weightc=Calculator(&apos;bad calculator&apos;,18,17,16,15) #初始化运行 input1234567891011score=int(input(&apos;Please input your score: \\n&apos;)) #用int取整if score&gt;=90: print(&apos;Congradulation, you get an A&apos;)elif score &gt;=80: print(&apos;You get a B&apos;)elif score &gt;=70: print(&apos;You get a C&apos;)elif score &gt;=60: print(&apos;You get a D&apos;)else: print(&apos;Sorry, You are failed &apos;) 元组，列表，字典元组tuple1turple=（1，2，3，‘python’） #括号，不可改变 列表list1list=[1,2,3,&apos;py&apos;] #列表用书名号 多维列表123list=[[1,2,3], [2,3,4], [3,4,5]] #三行三列 list添加123456789101112list=[1,2,3]list.append(0) #在末尾加list.insert(1,0) #在位置1 添加0list.remove(2) #移除列表中数字为2的数字print(list[1]) #列表第0位数字print（list[-1]） #列表最后一位数字print(list[0][1]) #多维列表的索引print(list.index(2)) #在列表中第一次出现2 的项的索引print(list.count(2)) #列表中2 出现的次数print(list.sort()) #从小到大排序print(list.sort(reverse=True)) #从大到小排序 list和元组输出对比123456789101112131415161718for index in range(len(a_list)): print(&quot;index = &quot;, index, &quot;, number in list = &quot;, a_list[index])&quot;&quot;&quot;index = 0 , number in list = 12index = 1 , number in list = 3index = 2 , number in list = 67index = 3 , number in list = 7index = 4 , number in list = 82&quot;&quot;&quot;for index in range(len(a_tuple)): print(&quot;index = &quot;, index, &quot;, number in tuple = &quot;, a_tuple[index])&quot;&quot;&quot;index = 0 , number in tuple = 12index = 1 , number in tuple = 3index = 2 , number in tuple = 5index = 3 , number in tuple = 15index = 4 , number in tuple = 6 字典dic 分key和value123456789101112131415举例分析a_list = [1,2,3,4,5,6,7,8]d1 = &#123;&apos;apple&apos;:1, &apos;pear&apos;:2, &apos;orange&apos;:3&#125;d2 = &#123;1:&apos;a&apos;, 2:&apos;b&apos;, 3:&apos;c&apos;&#125;d3 = &#123;1:&apos;a&apos;, &apos;b&apos;:2, &apos;c&apos;:3&#125;print(d1[&apos;apple&apos;]) # 1print(a_list[0]) # 1del d1[&apos;pear&apos;]print(d1) # &#123;&apos;orange&apos;: 3, &apos;apple&apos;: 1&#125;d1[&apos;b&apos;] = 20print(d1) # &#123;&apos;orange&apos;: 3, &apos;b&apos;: 20, &apos;pear&apos;: 2, &apos;apple&apos;: 1&#125; 字典内字典，字典内数组12345def func(): return 0d4 = &#123;&apos;apple&apos;:[1,2,3], &apos;pear&apos;:&#123;1:3, 3:&apos;a&apos;&#125;, &apos;orange&apos;:func&#125;print(d4[&apos;pear&apos;][3]) # a import123456789101112firstimport time as tprint(t.localtime())secondfrom time import time, localtime #只import想要的功能print(localtime())print(time)thirdfrom time import * #输入模块全部功能print(localtime()) continue and breakpass 过了这一步，从头开始而break直接跳出循环continue会直接不进行下面的，直接进行下一次循环1234567891011121314151617a=Truewhile a: b= input(&apos;type somesthing&apos;) if b==&apos;1&apos;: a= False else: passprint (&apos;finish run&apos;)&apos;&apos;&apos;&apos;type somesthing:2still in whiletype somesthing:3still in whiletype somesthing:1still in while #会执行下面的语句再跳出finish run 12345678910111213141516while True: b=input(&apos;input somesthing:&apos;) if b==&apos;1&apos;: continue else: pass print(&apos;still in while&apos; )print (&apos;finish run&apos;)&quot;&quot;&quot;input somesthing:3still in whileinput somesthing:1 # 没有&quot;still in while&quot;。直接进入下一次循环input somesthing:4still in whileinput somesthing: try 错误处理123456789101112131415处理错误：会使用到循环语句。首先报错：没有这样的文件No such file or directory. 然后决定是否输入y, 输入y以后，系统就会新建一个文件（要用写入的类型）， 再次运行后，文件中就会写入sssstry: file=open(&apos;eeee.txt&apos;,&apos;r+&apos;)except Exception as e: print(e) response = input(&apos;do you want to create a new file:&apos;) if response==&apos;y&apos;: file=open(&apos;eeee.txt&apos;,&apos;w&apos;) else: passelse: file.write(&apos;ssss&apos;) file.close() zip 将两个列表，合成一个tuple1234567891011121314a=[1,2,3]b=[4,5,6]ab=zip(a,b)print(list(ab)) #list 是可视化ab&quot;&quot;&quot;[(1, 4), (2, 5), (3, 6)]&quot;&quot;&quot;for i,j in zip(a,b): #合并之后是哟=一个里面有两个值 print(i/2,j*2)&quot;&quot;&quot;0.5 81.0 101.5 12 lambda 定义了一个函数123456789fun= lambda x,y:x+yx=int(input(&apos;x=&apos;)) #这里要定义int整数，否则会默认为字符串y=int(input(&apos;y=&apos;))print(fun(x,y))&quot;&quot;&quot;x=6y=612 map 把函数和参数绑定在一起12345678910&gt;&gt;&gt; def fun(x,y): return (x+y)&gt;&gt;&gt; list(map(fun,[1],[2]))&quot;&quot;&quot;[3]&quot;&quot;&quot;&gt;&gt;&gt; list(map(fun,[1,2],[3,4]))&quot;&quot;&quot;[4,6]&quot;&quot;&quot; copy &amp; deepcopy123456789101112import copya=[1,2,3]a=b&gt;&gt;&gt;id(a)=id(b)Truec=copy.copy(a)&gt;&gt;&gt;print(id(a)==id(c))False&gt;&gt;&gt;c[1]=222&gt;&gt;&gt;print(c)c=[1,2222,3]&gt;&gt;&gt;d=copy.deepcopy(a) set 找不同set基本，找一个语句或者list中的不同的元素123456789101112char_list = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;c&apos;, &apos;d&apos;, &apos;d&apos;, &apos;d&apos;]sentence = &apos;Welcome Back to This Tutorial&apos;print(set(char_list))# &#123;&apos;b&apos;, &apos;d&apos;, &apos;a&apos;, &apos;c&apos;&#125;print(set(sentence))# &#123;&apos;l&apos;, &apos;m&apos;, &apos;a&apos;, &apos;c&apos;, &apos;t&apos;, &apos;r&apos;, &apos;s&apos;, &apos; &apos;, &apos;o&apos;, &apos;W&apos;, &apos;T&apos;, &apos;B&apos;, &apos;i&apos;, &apos;e&apos;, &apos;u&apos;, &apos;h&apos;, &apos;k&apos;&#125;print(set(char_list+ list(sentence)))# &#123;&apos;l&apos;, &apos;m&apos;, &apos;a&apos;, &apos;c&apos;, &apos;t&apos;, &apos;r&apos;, &apos;s&apos;, &apos; &apos;, &apos;d&apos;, &apos;o&apos;, &apos;W&apos;, &apos;T&apos;, &apos;B&apos;, &apos;i&apos;, &apos;e&apos;, &apos;k&apos;, &apos;h&apos;, &apos;u&apos;, &apos;b&apos;&#125; add 添加元素123456unique_char = set(char_list)unique_char.add(&apos;x&apos;)### unique_char.add([&apos;y&apos;, &apos;z&apos;]) this is wrongprint(unique_char)# &#123;&apos;x&apos;, &apos;b&apos;, &apos;d&apos;, &apos;c&apos;, &apos;a&apos;&#125; remove &amp; discard 清除某个元素，，，clear清除全部筛选 difference看有没有不同的元素，intersection看有没有相同的元素123456unique_char = set(char_list)print(unique_char.difference(&#123;&apos;a&apos;, &apos;e&apos;, &apos;i&apos;&#125;))# &#123;&apos;b&apos;, &apos;d&apos;, &apos;c&apos;&#125;print(unique_char.intersection(&#123;&apos;a&apos;, &apos;e&apos;, &apos;i&apos;&#125;))# &#123;&apos;a&apos;&#125; 正则化//用于搜索，网络爬虫，文件整理，数据筛选之类匹配1234567import re # 内置模块# regular expressionpattern1 = &quot;cat&quot;pattern2 = &quot;bird&quot;string = &quot;dog runs to cat&quot;print(re.search(pattern1, string)) # &lt;_sre.SRE_Match object; span=(12, 15), match=&apos;cat&apos;&gt;print(re.search(pattern2, string)) # None 灵活匹配12345678# multiple patterns (&quot;run&quot; or &quot;ran&quot;)ptn = r&quot;r[au]n&quot; # start with &quot;r&quot; means raw string, 括号里面的是可变内容print(re.search(ptn, &quot;dog runs to cat&quot;))print(re.search(r&quot;r[A-Z]n&quot;, &quot;dog runs to cat&quot;)) # Noneprint(re.search(r&quot;r[a-z]n&quot;, &quot;dog runs to cat&quot;)) # &lt;_sre.SRE_Match object; span=(4, 7), match=&apos;run&apos;&gt;print(re.search(r&quot;r[0-9]n&quot;, &quot;dog r2ns to cat&quot;)) # &lt;_sre.SRE_Match object; span=(4, 7), match=&apos;r2n&apos;&gt;print(re.search(r&quot;r[0-9a-z]n&quot;, &quot;dog runs to cat&quot;)) # &lt;_sre.SRE_Match object; span=(4, 7), match=&apos;run&apos;&gt; 按类型匹配 \\d : 任何数字 \\D : 不是数字 \\s : 任何 white space, 如 [\\t\\n\\r\\f\\v] \\S : 不是 white space \\w : 任何大小写字母, 数字和 “” [a-zA-Z0-9] \\W : 不是 \\w \\b : 空白字符 (只在某个字的开头或结尾) \\B : 空白字符 (不在某个字的开头或结尾) \\ : 匹配 \\ . : 匹配任何字符 (除了 \\n) ^ : 匹配开头 $ : 匹配结尾 ? : 前面的字符可有可无有时^会出问题，如果用通常的形式是不成功的. 比如下面的 “I” 出现在第二行开头, 但是使用 r”^I” 却匹配不到第二行, 这时候, 我们要使用 另外一个参数, 让 re.search() 可以对每一行单独处理. 这个参数就是 flags=re.M, 或者这样写也行 flags=re.MULTILINE.123456string = &quot;&quot;&quot;dog runs to cat.I run to dog.&quot;&quot;&quot;print(re.search(r&quot;^I&quot;, string)) # Noneprint(re.search(r&quot;^I&quot;, string, flags=re.M)) # &lt;_sre.SRE_Match object; span=(18, 19), match=&apos;I&apos;&gt; 重复匹配 : 重复零次或多次 : 重复一次或多次 {n, m} : 重复 n 至 m 次 {n} : 重复 n 次 1234567891011# * : occur 0 or more timesprint(re.search(r&quot;ab*&quot;, &quot;a&quot;)) # &lt;_sre.SRE_Match object; span=(0, 1), match=&apos;a&apos;&gt;print(re.search(r&quot;ab*&quot;, &quot;abbbbb&quot;)) # &lt;_sre.SRE_Match object; span=(0, 6), match=&apos;abbbbb&apos;&gt;# + : occur 1 or more timesprint(re.search(r&quot;ab+&quot;, &quot;a&quot;)) # Noneprint(re.search(r&quot;ab+&quot;, &quot;abbbbb&quot;)) # &lt;_sre.SRE_Match object; span=(0, 6), match=&apos;abbbbb&apos;&gt;# &#123;n, m&#125; : occur n to m timesprint(re.search(r&quot;ab&#123;2,10&#125;&quot;, &quot;a&quot;)) # Noneprint(re.search(r&quot;ab&#123;2,10&#125;&quot;, &quot;abbbbb&quot;)) # &lt;_sre.SRE_Match object; span=(0, 6), match=&apos;abbbbb&apos;&gt; 分组 match.group()1234match = re.search(r&quot;(\\d+), Date: (.+)&quot;, &quot;ID: 021523, Date: Feb/12/2017&quot;)print(match.group()) # 021523, Date: Feb/12/2017print(match.group(1)) # 021523print(match.group(2)) # Date: Feb/12/2017 如果给组定义个名字 ?p&lt;name&gt;123match = re.search(r&quot;(?P&lt;id&gt;\\d+), Date: (?P&lt;date&gt;.+)&quot;, &quot;ID: 021523, Date: Feb/12/2017&quot;)print(match.group(&apos;id&apos;)) # 021523print(match.group(&apos;date&apos;)) # Date: Feb/12/2017 找到所有项 findall12345# findallprint(re.findall(r&quot;r[ua]n&quot;, &quot;run ran ren&quot;)) # [&apos;run&apos;, &apos;ran&apos;]# | : orprint(re.findall(r&quot;(run|ran)&quot;, &quot;run ran ren&quot;)) # [&apos;run&apos;, &apos;ran&apos;] replace re.sub()1print(re.sub(r&quot;r[au]ns&quot;, &quot;catches&quot;, &quot;dog runs to cat&quot;)) # dog catches to cat 分割 split1print(re.split(r&quot;[,;\\.]&quot;, &quot;a;b,c.d;e&quot;)) # [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;] compile 搜索12compiled_re = re.compile(r&quot;r[ua]n&quot;)print(compiled_re.search(&quot;dog ran to cat&quot;)) # &lt;_sre.SRE_Match object; span=(4, 7), match=&apos;ran&apos;&gt; 小抄","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"gitbook使用指南","slug":"gitbook使用指南/20190901-gitbook使用指南","date":"2019-09-02T07:31:18.000Z","updated":"2019-09-01T07:58:35.134Z","comments":true,"path":"2019/09/02/gitbook使用指南/20190901-gitbook使用指南/","link":"","permalink":"http://yoursite.com/2019/09/02/gitbook使用指南/20190901-gitbook使用指南/","excerpt":"","text":"gitbook安装node.js安装好后，sudo su 进入root模式node -v 查看版本npm -v 查看版本npm install -g cnpm –registry=https://registry.npm.taobao.org建立淘宝镜像,更快一些（cnpm）c n p m cnpm install -g gitbook-clicnpm -v 查看版本建立自己blog文件夹 cd Users/Florian_Gao/Desktop/gitpwd 查看一下位置mkdir gitbookpwdgitbook init生成安装hexo gitbook init启动hexo 这里是gitbook serve 不能简写 简单书写markdown 换行 ··· ···出现的是代码框 写的文字内容改变文字颜色 · · 这是行内代码 外部链接 就直接在后面添加网址地址就好 子目录 *介绍 子目录注意前面有两个空格插件npm搜gitbook就可以插件要在文件book.json中，所以要自己新建把插件弄好后要gitbook install上传GitHub先在GitHub建立一个repo然后在本地建文件夹 git init然后把文件夹clone过来 git remote add origin git@github.com:Florian-Gao/仓库名.git然后把书上传 git add .git commit -m “reason”最后上传 git push -u origin master当然也可以建立分支上传","categories":[],"tags":[{"name":"gitbook","slug":"gitbook","permalink":"http://yoursite.com/tags/gitbook/"}]},{"title":"hexo搭建个人博客","slug":"hexo搭建个人博客/20190901-hexo搭建个人博客","date":"2019-09-01T07:29:21.000Z","updated":"2019-09-01T08:01:00.815Z","comments":true,"path":"2019/09/01/hexo搭建个人博客/20190901-hexo搭建个人博客/","link":"","permalink":"http://yoursite.com/2019/09/01/hexo搭建个人博客/20190901-hexo搭建个人博客/","excerpt":"","text":"hexo搭建个人博客安装node.js安装好后，sudo su 进入root模式node -v查看版本npm -v 查看版本npm install -g cnpm --registry=https://registry.npm.taobao.org建立淘宝镜像,更快一些（cnpm） c n p mcnpm install -g hexo-clicnpm -v查看版本 建立自己blog文件夹cd Users/Florian_Gao/Desktop/git pwd 查看一下位置mkdir blogpwd 生成安装hexosudo hexo init 启动hexohexo s 部署到gitbub在repo中建立一个.github.io在系统blog文件夹中部署一个git的插件cnpm install --save hexo-deployer-git``ll还要设置里面一个文件_config.yml用vim _config.yml进行修改修改deployer 123type： gitrepo： 自己仓库的地址branch： master 注意：上面三个都要在冒号后面有空格有视频 https://www.bilibili.com/video/av23211850?t=206 部署到远端hexo d在github上刷新，输入 Florian-Gao.github.io即可访问 更换hexo主题github.com/litten/hexo-theme-yilia 在blog文档下进行 pwd看下克隆过来到本地blog/themes/yiliagit clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 仍然进入vim _config.yml进行修改theme，改成你想要的主题的名字就可以了 12345hexo clean 清理一下hexo g 生成一下，generatorhexo s 重开一下hexo d 推到远端hexo g -d 生成推送 更改主题在主文件夹_config.yml进行修改titlesubtitle 如果修改发的文章的地址，在URL中permalink进行修改添加图片，要 /路径空格➕路径 基本写作hexo new &lt;filename&gt;如果名字有空格，要加引号标题 new_post_name 进行更改即可update: 可以现实更新时间 123456tags: 如果一个标签就直接在后面写就可以 -pythin -mechine learning 前面两个空格，一个横线，并列着写，并列着写categories： -animals -cat 不支持同级分类，是父级和子集 文章内插入图片12345678910本地图片 文件放在 source/images文件夹中 markdown格式 ![提示文字](/images/test.jpg) html &lt;img src=&quot;图片路径&quot; alt=&quot;提示文字&quot;&gt;网络图片 直接把网络地址的粘进去就可以，两个都可以好用的图片库 imgur 图片下载格式已经帮你弄好了 视频代码直接粘过来就可以12345iframe格式 通用模式就可以 &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=65746051&amp;cid=114072844&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt; &lt;/iframe&gt; 如果要是更改长宽 &lt;iframe src=&quot;//player.bilibili.com/player.html?aid=65746051&amp;cid=114072844&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen=&quot;true&quot; width=&quot;100%&quot; height=&quot;450&quot;&gt; &lt;/iframe&gt; 这样就可以了 插入音频，配合文字先上传到网易云音乐也可以申请电台具体操作https://blog.csdn.net/Mculover666/article/details/90700059 文章没插入网址链接12345678类似于超链接 markdown [想说的东西](网址的地址) [有趣的网站](https://music.163.com) html &lt;a href=&quot;网址&quot;&gt;解释的内容&lt;/a&gt; &lt;a href=&quot;https://music.163.com&quot;&gt;网易云&lt;/a&gt; 直接把网址粘过去就可以","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"git使用指南","slug":"git使用指南/20190831-git使用指南","date":"2019-08-31T07:44:44.000Z","updated":"2019-09-01T08:27:27.139Z","comments":true,"path":"2019/08/31/git使用指南/20190831-git使用指南/","link":"","permalink":"http://yoursite.com/2019/08/31/git使用指南/20190831-git使用指南/","excerpt":"","text":"gitgit常用命令 git简介··· 工作区/Working Directory 在自己电脑可以看到的 版本区/Repository 当我们git add 就是放到暂存区当git commit 就是将文件从暂存区到分支··· 安装git（mac）在终端输入git –version就可以安装了创建版本库1234创建储存的文件夹 mkdir learngit变为git存储库 git init在文件夹中创建文件 touch readme.txt添加到仓库 git add readme.txt 123git add &lt;文件名&gt;可以同时添加多个文件 提交到仓库 git commit -m &quot;注释&quot; 时间穿梭机基本操作123打开文件 touch &lt;文件名&gt;看状态 git status看修改过的内容 git diff &lt;文件名&gt; 后退至之前版本看从最近到最远提交的日志 git log输出参数 git log --pretty=oneline回到以前的版本 git reset --hard 1094a1094a 为输入git log --pretty=oneline后出现的head代号HEAD^上个版本HEAD^^上上个版本HEAD～100上一百的版本回到上个版本 git reset --hard HEAD^ 前进至未来版本退到以前的版本之后，就不能再回到这个版本之后的版本，用git reflog之后再用git reset --hard &lt;HEAD&gt; 管理修改git管理的是修改，如果没有git add，直接git commit，那样不会上传，具体步骤 1第一次修改-&gt;git add-&gt;第二次修改-&gt;git add-&gt;git commit 撤销修改如果还未git add，即未将文件从工作区传到暂存区，使用git checkout --&lt;文件名&gt;git checkout就是从版本去的文件替换工作区的文件如果已经git add,可以使用 git reset HEAD &lt;文件名&gt;这个命令既可以回退版本，又可以把暂存区的内容修改并回退回工作区，下次仍要git add如果已经 git add，并且git commit，那样就要使用命令git reset --hard HEAD^如果同步到远程库，gg 删除文件删除文件 rm &lt;文件名&gt;删除文件夹 rm -rf &lt;&gt;如果从版本库删除 git rm &lt;文件名&gt;，然后git commit如果误删工作区的文件，使用git checkout --&lt;文件名&gt;git checkout就是从版本去的文件替换工作区的文件 远程仓库github具体步骤创建SSH Key-t rsa -C “your email”1打开id_rsa.pub cat id_rsa.pub 登录github12打开 Account setting--SSH Keys--Add SSH Key填写任意title，在Key粘贴 id_rsa.pub的内容 添加远程库在github上新建新的仓库repository1/与本地的仓库关联 git remote add origin git@github.com:Florian-Gao/仓库名.git2/git push -u origin master 把内容推到远程库3/之后只需要git push origin master 创建远程库和添加远程库结合起来就可以在GitHub中进行更新从远程库克隆首先在远程库中新建repo，勾选initialize this repository with a readme ,建成之后会有一个readme文件找好位置，clone在命令行git clone git@github.com:Florian-Gao/文件名.git 分支管理创建合并分支master分支是主分支可创建新的分支，并在新的分支上进行编辑 等新的分支上工作完成，可以进行分支的合并 创建dev分支，切换到dev分支12345git checkout -b dev #-b 相当于切换 ，两个命令的叠加 git branch dev //git checkout devgit branch 查看当前分支，当前分支会有一个*号然后在此分支进行上传 git add &lt;文件名&gt;//git commit -m &quot;reason&quot;在此分支上完成工作，可以回到主分支，git checkout master在dev分支提交的内容在master分支看不到 12将dev分支合并到当前分支，git merge dev合并在当前分支就能查看编辑dev上的内容了，也就用不到dev分支了，删除git branch -d dev 切换分支刚才说得 git checkout &lt;分支名&gt;，但是之前所说的未git add的工作区文件，直接用git checkout --&lt;文件名&gt;这里有重复，可以用新的命令 git switch 创建并切换新的分支123git switch -c dev直接切换已有的分支git switch master 分支管理命令小结123456789101112131415 查看分支git branch 重命名分支名 git branch -m &lt;当前分支名&gt; &lt;新的分支名&gt; 创建分支git branch &lt;name&gt; 切换分支git checkout &lt;name&gt; or git switch &lt;name&gt; 创建切换分支 git checkout -b &lt;name&gt; or git switch -c &lt;name&gt; 合并某分支到当前分支git merge &lt;name&gt; git merge &lt;branch&gt; 这个就是直接合并，不保留分支内容git merge --on-ff -m &quot;reason&quot; &lt;branch&gt;这种方法合并仍有分支内容在，可以仍在分支上进行工作 删除分支git branch -d &lt;name&gt; 恢复分支 git log 查看分支的提出号git branch &lt;分支名称&gt;&lt;提交号&gt; 查看分支图git log --graph让分支图更清晰git log --graph --pretty=oneline --abbrev-commit 如果合并的时候，分支文件不同，合并出现问题，需要手动进行更改分支合并策略12345678910111213141516171819202122232425262728git merge &lt;branch&gt; 这个就是直接合并，不保留分支内容git merge --on-ff -m &quot;reason&quot; &lt;branch&gt;这种方法合并仍有分支内容在，可以仍在分支上进行工作bug管理 如果在分支dev工作，遇到master上有bug git stash还不想提交dev上的内容，可以使用这个指令存储 处理bug 首先进到mastergit checkout master然后在master建立临时分支‘debug’git checkout -b debug处理完bug之后git add &lt;file.name&gt;git commit -m &quot;reason&quot;回到主分支git checkout master合并debug分支git merge --on-ff -m &quot;reason&quot; &lt;file.name&gt;处理完bug之后，进入dev继续工作git checkout dev 因为master有问题，dev也是master上分出来的，所以也会有这种问题，简单方法git checkout devgit cherry-pick &lt;commit&gt;这里是commit的命令数字也就是HEAD同理，在dev上修改bug之后，也可以在master上修改，方式一样，只是在dev上先保存git stash 处理完bug，回到dev git status会发现nothing，这是git把stash存放在某一地方用git stash list来看是否还在 恢复方法，有两种123一，git stash pop 恢复并把stash内容删掉二，git stash apply 恢复 git stash drop 把stash删掉 有新功能添加进来12345git checkout -b featuregit add new.pygit commit -m &quot;set new&quot;git checkout devgit merge --on-ff -m &quot;new merge&quot; feature 但是现在说feature不能要，要删掉，怎么办 用之前所学 1git branch -d feature 发现error，这个时候就要用 1git branch -D feature 强制删除 多人协作 12git remote 查看远程库的信息git remote -v 查看更详细的信息 推送分支 123git push &lt;库名&gt; &lt;分支名&gt;git push origin mastergit push origin dev 打算上传哪个分支看自己另一个人克隆不是自己的文件 123git clone git@github.com:Florian-Gao/库名.git想在dev分支开发，要创建远程origin的dev分支到本地git checkout -b dev origin/dev 1234git checkout -b dev origin/devgit add &lt;file.name&gt;git commit -m &quot;&quot;git push origin dev 你的朋友提交了，恰好你也要提交 123git addgit commitgit push 然后你发现false，因为这个伙伴比你提交的快要怎么办呢首先 12345git pull 把最新的提交从origin/dev抓下来，在本地合并，解决冲突，再推送如果失败，是因为没有制定本地的dev分支与远程origin/dev分支链接git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;再pullgit pull 但是会出现问题，合并有问题，手动解决（解决冲突），再push 多人协作的git log的线路非常乱12git rebase可以使线路变成单路，更清晰 标签管理如果有了标签，找起来更加好找 标签只能对commit进行标记 标签不是时间顺序，而是按照字母顺序创建标签 git tag 12345678创建带指定信息的标签git tag -a &lt;tagname&gt; -m &quot;reason&quot;查看标签 git tag对commit进行标签 git tag &lt;name&gt; &lt;commit id/例如 f52c633&gt;看标签信息 git show &lt;tagname&gt;删除工作区标签 git tag -d &lt;tagname&gt;删除远程标签git push origin :refs/tags/&lt;tagname&gt;上传标签git push origin &lt;tagname&gt;上传全部标签git push origin --tags 自定义git让git有颜色git config --global color.ui true 忽略特殊文件12345git工作区根目录下创建一个特殊的 (.gitignore)文件，把需要忽略的文件名填入就行如果有的文件被忽略，git add -f &lt;file.name&gt;对.gitignore命令检查，查出来可以针对修改git check-ignore -v &lt;file.name&gt;##查找的文件名 配置别名12git config --global alias.&lt;简化name&gt; &lt;原name&gt;global是全局","categories":[{"name":"gitlearn","slug":"gitlearn","permalink":"http://yoursite.com/categories/gitlearn/"}],"tags":[{"name":"git","slug":"git","permalink":"http://yoursite.com/tags/git/"}]},{"title":"初次见面，请多指教","slug":"初次见面，请多指教/20190829-初次见面，请多指教","date":"2019-08-29T14:51:49.000Z","updated":"2019-09-01T07:28:03.635Z","comments":true,"path":"2019/08/29/初次见面，请多指教/20190829-初次见面，请多指教/","link":"","permalink":"http://yoursite.com/2019/08/29/初次见面，请多指教/20190829-初次见面，请多指教/","excerpt":"","text":"&emsp;&emsp; 希望在这里分享自己的所学，交流自己的所想，谈谈自己的所见，聊聊自己的所悟。&emsp;&emsp; 境随心转，见证成长。","categories":[],"tags":[{"name":"杂记","slug":"杂记","permalink":"http://yoursite.com/tags/杂记/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-29T02:56:54.847Z","updated":"2019-08-29T02:56:54.847Z","comments":true,"path":"2019/08/29/hello-world/","link":"","permalink":"http://yoursite.com/2019/08/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}